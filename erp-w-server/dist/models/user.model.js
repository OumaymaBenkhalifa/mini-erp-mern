"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserSchema = exports.User = void 0;
const mongoose_1 = __importDefault(require("mongoose"));
const mongoose_2 = require("mongoose");
const bcryptjs_1 = __importDefault(require("bcryptjs"));
const bcrypt = bcryptjs_1.default;
const enumValues = require('mongoose-enumvalues');
var Role;
(function (Role) {
    Role["SUPER"] = "superAdmin";
    Role["ADMIN"] = "admin";
    Role["CLIENT"] = "client";
    Role["EMPLOYE"] = "employe";
})(Role || (Role = {}));
const UserS = {
    nom: {
        type: String,
        isRequired: true,
        isLength: {
            errorMessage: 'name should be at least 3 chars long',
            options: { min: 3 },
        },
        isAlpha: {
            negated: false,
            errorMessage: 'name has to be alphabetic',
        },
    },
    prenom: {
        type: String,
        isLength: {
            errorMessage: 'name should be at least 3 chars long',
            options: { min: 3 },
        },
        isAlpha: {
            negated: false,
            errorMessage: 'name has to be alphabetic',
        },
    },
    role: {
        type: String,
        enum: {
            values: [Role.SUPER, Role.ADMIN, Role.CLIENT, Role.EMPLOYE],
        },
    },
    email: {
        type: String,
        isEmail: {
            bail: true,
            errorMessage: 'invalid email format',
        },
    },
    password: {
        type: String,
        isLength: {
            errorMessage: 'Password should be at least 7 chars long',
            options: { min: 7 },
        },
    },
    date: {
        type: Date,
        default: Date.now,
    },
    factures: [
        {
            ref: 'Facture',
            type: mongoose_1.default.Schema.Types.ObjectId,
        },
    ],
    ficheDePaixFR: [
        {
            ref: 'FicheFR',
            type: mongoose_1.default.Schema.Types.ObjectId,
        },
    ],
    ficheDePaixTN: [
        {
            ref: 'FicheTN',
            type: mongoose_1.default.Schema.Types.ObjectId,
        },
    ],
};
const UserSchema = new mongoose_2.Schema(UserS);
exports.UserSchema = UserSchema;
UserSchema.statics.build = (attrs) => {
    return new User(attrs);
};
UserSchema.pre('save', async function (next) {
    if (this.password) {
        const salt = await bcrypt.genSalt(10);
        const hashedPassword = await bcrypt.hash(this.password, salt);
        this.password = hashedPassword;
    }
});
UserSchema.plugin(enumValues);
const User = mongoose_1.default.model('User', UserSchema);
exports.User = User;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlci5tb2RlbC5qcyIsInNvdXJjZVJvb3QiOiIuL3NyYy8iLCJzb3VyY2VzIjpbIm1vZGVscy91c2VyLm1vZGVsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLHdEQUFnQztBQUNoQyx1Q0FBNEM7QUFDNUMsd0RBQThCO0FBRzlCLE1BQU0sTUFBTSxHQUFHLGtCQUFNLENBQUM7QUFDdEIsTUFBTSxVQUFVLEdBQUcsT0FBTyxDQUFDLHFCQUFxQixDQUFDLENBQUM7QUFFbEQsSUFBSyxJQUtKO0FBTEQsV0FBSyxJQUFJO0lBQ1AsNEJBQW9CLENBQUE7SUFDcEIsdUJBQWUsQ0FBQTtJQUNmLHlCQUFpQixDQUFBO0lBQ2pCLDJCQUFtQixDQUFBO0FBQ3JCLENBQUMsRUFMSSxJQUFJLEtBQUosSUFBSSxRQUtSO0FBaUJELE1BQU0sS0FBSyxHQUFHO0lBQ1osR0FBRyxFQUFFO1FBQ0gsSUFBSSxFQUFFLE1BQU07UUFDWixVQUFVLEVBQUUsSUFBSTtRQUNoQixRQUFRLEVBQUU7WUFDUixZQUFZLEVBQUUsc0NBQXNDO1lBRXBELE9BQU8sRUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUU7U0FDcEI7UUFDRCxPQUFPLEVBQUU7WUFDUCxPQUFPLEVBQUUsS0FBSztZQUNkLFlBQVksRUFBRSwyQkFBMkI7U0FDMUM7S0FDRjtJQUNELE1BQU0sRUFBRTtRQUNOLElBQUksRUFBRSxNQUFNO1FBQ1osUUFBUSxFQUFFO1lBQ1IsWUFBWSxFQUFFLHNDQUFzQztZQUVwRCxPQUFPLEVBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFO1NBQ3BCO1FBQ0QsT0FBTyxFQUFFO1lBQ1AsT0FBTyxFQUFFLEtBQUs7WUFDZCxZQUFZLEVBQUUsMkJBQTJCO1NBQzFDO0tBQ0Y7SUFDRCxJQUFJLEVBQUU7UUFDSixJQUFJLEVBQUUsTUFBTTtRQUNaLElBQUksRUFBRTtZQUNKLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUM7U0FDNUQ7S0FNRjtJQUVELEtBQUssRUFBRTtRQUNMLElBQUksRUFBRSxNQUFNO1FBQ1osT0FBTyxFQUFFO1lBQ1AsSUFBSSxFQUFFLElBQUk7WUFDVixZQUFZLEVBQUUsc0JBQXNCO1NBQ3JDO0tBQ0Y7SUFDRCxRQUFRLEVBQUU7UUFDUixJQUFJLEVBQUUsTUFBTTtRQUNaLFFBQVEsRUFBRTtZQUNSLFlBQVksRUFBRSwwQ0FBMEM7WUFFeEQsT0FBTyxFQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRTtTQUNwQjtLQUNGO0lBQ0QsSUFBSSxFQUFFO1FBQ0osSUFBSSxFQUFFLElBQUk7UUFDVixPQUFPLEVBQUUsSUFBSSxDQUFDLEdBQUc7S0FDbEI7SUFDRCxRQUFRLEVBQUU7UUFDUjtZQUNFLEdBQUcsRUFBRSxTQUFTO1lBQ2QsSUFBSSxFQUFFLGtCQUFRLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxRQUFRO1NBQ3JDO0tBQ0Y7SUFDRCxhQUFhLEVBQUU7UUFDYjtZQUNFLEdBQUcsRUFBRSxTQUFTO1lBQ2QsSUFBSSxFQUFFLGtCQUFRLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxRQUFRO1NBQ3JDO0tBQ0Y7SUFDRCxhQUFhLEVBQUU7UUFDYjtZQUNFLEdBQUcsRUFBRSxTQUFTO1lBQ2QsSUFBSSxFQUFFLGtCQUFRLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxRQUFRO1NBQ3JDO0tBQ0Y7Q0FDRixDQUFDO0FBQ0YsTUFBTSxVQUFVLEdBQUcsSUFBSSxpQkFBTSxDQUFRLEtBQUssQ0FBQyxDQUFDO0FBdUJ0QixnQ0FBVTtBQXRCaEMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEdBQUcsQ0FBQyxLQUFZLEVBQUUsRUFBRTtJQUMxQyxPQUFPLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ3pCLENBQUMsQ0FBQztBQUVGLFVBQVUsQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLEtBQUssV0FBVyxJQUFJO0lBS3pDLElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRTtRQUNqQixNQUFNLElBQUksR0FBRyxNQUFNLE1BQU0sQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUM7UUFFdEMsTUFBTSxjQUFjLEdBQUcsTUFBTSxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDOUQsSUFBSSxDQUFDLFFBQVEsR0FBRyxjQUFjLENBQUM7S0FDaEM7QUFDSCxDQUFDLENBQUMsQ0FBQztBQUdILFVBQVUsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUM7QUFFOUIsTUFBTSxJQUFJLEdBQUcsa0JBQVEsQ0FBQyxLQUFLLENBQW9CLE1BQU0sRUFBRSxVQUFVLENBQUMsQ0FBQztBQUUxRCxvQkFBSSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBtb25nb29zZSBmcm9tICdtb25nb29zZSc7XG5pbXBvcnQgeyBEb2N1bWVudCwgU2NoZW1hIH0gZnJvbSAnbW9uZ29vc2UnO1xuaW1wb3J0IEJjcnlwdCBmcm9tICdiY3J5cHRqcyc7XG5pbXBvcnQgeyBJRmFjdHVyZSB9IGZyb20gJy4vZmFjdHVyZS5tb2RlbCc7XG5pbXBvcnQgeyBJRmljaGUsIElGaWNoZUZSLCBJRmljaGVUTiB9IGZyb20gJy4vZmljaGVQYWl4Lm1vZGVsJztcbmNvbnN0IGJjcnlwdCA9IEJjcnlwdDtcbmNvbnN0IGVudW1WYWx1ZXMgPSByZXF1aXJlKCdtb25nb29zZS1lbnVtdmFsdWVzJyk7XG5cbmVudW0gUm9sZSB7XG4gIFNVUEVSID0gJ3N1cGVyQWRtaW4nLFxuICBBRE1JTiA9ICdhZG1pbicsXG4gIENMSUVOVCA9ICdjbGllbnQnLFxuICBFTVBMT1lFID0gJ2VtcGxveWUnLFxufVxuXG5pbnRlcmZhY2UgSVVzZXIgZXh0ZW5kcyBEb2N1bWVudCB7XG4gIG5vbTogc3RyaW5nO1xuICBwcmVub206IHN0cmluZztcbiAgcm9sZTogUm9sZTtcbiAgZW1haWw6IHN0cmluZztcbiAgcGFzc3dvcmQ6IHN0cmluZztcbiAgZmFjdHVyZXM/OiBBcnJheTxJRmFjdHVyZT47XG4gIGRhdGU/OiBEYXRlO1xuICBmaWNoZURlUGFpeFROPzogQXJyYXk8SUZpY2hlVE4+O1xuICBmaWNoZURlUGFpeEZSPzogQXJyYXk8SUZpY2hlRlI+O1xufVxuaW50ZXJmYWNlIElVc2VyTW9kZWwgZXh0ZW5kcyBtb25nb29zZS5Nb2RlbDxJVXNlcj4ge1xuICBidWlsZChhdHRyczogSVVzZXIpOiBJVXNlcjtcbn1cblxuY29uc3QgVXNlclMgPSB7XG4gIG5vbToge1xuICAgIHR5cGU6IFN0cmluZyxcbiAgICBpc1JlcXVpcmVkOiB0cnVlLFxuICAgIGlzTGVuZ3RoOiB7XG4gICAgICBlcnJvck1lc3NhZ2U6ICduYW1lIHNob3VsZCBiZSBhdCBsZWFzdCAzIGNoYXJzIGxvbmcnLFxuICAgICAgLy8gTXVsdGlwbGUgb3B0aW9ucyB3b3VsZCBiZSBleHByZXNzZWQgYXMgYW4gYXJyYXlcbiAgICAgIG9wdGlvbnM6IHsgbWluOiAzIH0sXG4gICAgfSxcbiAgICBpc0FscGhhOiB7XG4gICAgICBuZWdhdGVkOiBmYWxzZSxcbiAgICAgIGVycm9yTWVzc2FnZTogJ25hbWUgaGFzIHRvIGJlIGFscGhhYmV0aWMnLFxuICAgIH0sXG4gIH0sXG4gIHByZW5vbToge1xuICAgIHR5cGU6IFN0cmluZyxcbiAgICBpc0xlbmd0aDoge1xuICAgICAgZXJyb3JNZXNzYWdlOiAnbmFtZSBzaG91bGQgYmUgYXQgbGVhc3QgMyBjaGFycyBsb25nJyxcbiAgICAgIC8vIE11bHRpcGxlIG9wdGlvbnMgd291bGQgYmUgZXhwcmVzc2VkIGFzIGFuIGFycmF5XG4gICAgICBvcHRpb25zOiB7IG1pbjogMyB9LFxuICAgIH0sXG4gICAgaXNBbHBoYToge1xuICAgICAgbmVnYXRlZDogZmFsc2UsXG4gICAgICBlcnJvck1lc3NhZ2U6ICduYW1lIGhhcyB0byBiZSBhbHBoYWJldGljJyxcbiAgICB9LFxuICB9LFxuICByb2xlOiB7XG4gICAgdHlwZTogU3RyaW5nLFxuICAgIGVudW06IHtcbiAgICAgIHZhbHVlczogW1JvbGUuU1VQRVIsIFJvbGUuQURNSU4sIFJvbGUuQ0xJRU5ULCBSb2xlLkVNUExPWUVdLFxuICAgIH0sXG4gICAgLyptYXRjaGVzOiB7XG4gICAgICBvcHRpb25zOiBbL1xcYig/OnN1cGVyQWRtaW58YWRtaW58Y2xpZW50fGVtcGxveWUpXFxiL10sXG4gICAgICBlcnJvck1lc3NhZ2U6ICdJbnZhbGlkIHJvbGUnLFxuICAgIH0sKi9cbiAgICAvL2VudW06IFsnc3VwZXJBZG1pbicsICdhZG1pbicsICdjbGllbnQnLCAnZW1wbG95ZSddLFxuICB9LFxuXG4gIGVtYWlsOiB7XG4gICAgdHlwZTogU3RyaW5nLFxuICAgIGlzRW1haWw6IHtcbiAgICAgIGJhaWw6IHRydWUsXG4gICAgICBlcnJvck1lc3NhZ2U6ICdpbnZhbGlkIGVtYWlsIGZvcm1hdCcsXG4gICAgfSxcbiAgfSxcbiAgcGFzc3dvcmQ6IHtcbiAgICB0eXBlOiBTdHJpbmcsXG4gICAgaXNMZW5ndGg6IHtcbiAgICAgIGVycm9yTWVzc2FnZTogJ1Bhc3N3b3JkIHNob3VsZCBiZSBhdCBsZWFzdCA3IGNoYXJzIGxvbmcnLFxuICAgICAgLy8gTXVsdGlwbGUgb3B0aW9ucyB3b3VsZCBiZSBleHByZXNzZWQgYXMgYW4gYXJyYXlcbiAgICAgIG9wdGlvbnM6IHsgbWluOiA3IH0sXG4gICAgfSxcbiAgfSxcbiAgZGF0ZToge1xuICAgIHR5cGU6IERhdGUsXG4gICAgZGVmYXVsdDogRGF0ZS5ub3csXG4gIH0sXG4gIGZhY3R1cmVzOiBbXG4gICAge1xuICAgICAgcmVmOiAnRmFjdHVyZScsXG4gICAgICB0eXBlOiBtb25nb29zZS5TY2hlbWEuVHlwZXMuT2JqZWN0SWQsXG4gICAgfSxcbiAgXSxcbiAgZmljaGVEZVBhaXhGUjogW1xuICAgIHtcbiAgICAgIHJlZjogJ0ZpY2hlRlInLFxuICAgICAgdHlwZTogbW9uZ29vc2UuU2NoZW1hLlR5cGVzLk9iamVjdElkLFxuICAgIH0sXG4gIF0sXG4gIGZpY2hlRGVQYWl4VE46IFtcbiAgICB7XG4gICAgICByZWY6ICdGaWNoZVROJyxcbiAgICAgIHR5cGU6IG1vbmdvb3NlLlNjaGVtYS5UeXBlcy5PYmplY3RJZCxcbiAgICB9LFxuICBdLFxufTtcbmNvbnN0IFVzZXJTY2hlbWEgPSBuZXcgU2NoZW1hPElVc2VyPihVc2VyUyk7XG5Vc2VyU2NoZW1hLnN0YXRpY3MuYnVpbGQgPSAoYXR0cnM6IElVc2VyKSA9PiB7XG4gIHJldHVybiBuZXcgVXNlcihhdHRycyk7XG59O1xuXG5Vc2VyU2NoZW1hLnByZSgnc2F2ZScsIGFzeW5jIGZ1bmN0aW9uIChuZXh0KSB7XG4gIC8qaWYgKCEodGhpcy5pc05ldyB8fCB0aGlzLmlzTW9kaWZpZWQoJ3Bhc3N3b3JkJykpKSB7XG4gICAgY29uc29sZS5sb2codGhpcyk7XG4gICAgbmV4dCgpO1xuICB9Ki9cbiAgaWYgKHRoaXMucGFzc3dvcmQpIHtcbiAgICBjb25zdCBzYWx0ID0gYXdhaXQgYmNyeXB0LmdlblNhbHQoMTApO1xuICAgIC8vaGFzaCBwYXNzd29yZFxuICAgIGNvbnN0IGhhc2hlZFBhc3N3b3JkID0gYXdhaXQgYmNyeXB0Lmhhc2godGhpcy5wYXNzd29yZCwgc2FsdCk7XG4gICAgdGhpcy5wYXNzd29yZCA9IGhhc2hlZFBhc3N3b3JkO1xuICB9XG59KTtcblxuLy9jb25zdCBVc2VyID0gbW9uZ29vc2UubW9kZWwoJ1VzZXInLCB1c2VyU2NoZW1hKTtcblVzZXJTY2hlbWEucGx1Z2luKGVudW1WYWx1ZXMpO1xuXG5jb25zdCBVc2VyID0gbW9uZ29vc2UubW9kZWw8SVVzZXIsIElVc2VyTW9kZWw+KCdVc2VyJywgVXNlclNjaGVtYSk7XG5cbmV4cG9ydCB7IFVzZXIsIElVc2VyLCBVc2VyU2NoZW1hIH07XG4iXX0=
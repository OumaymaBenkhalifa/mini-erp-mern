"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.deletefacture = exports.updatefacture = exports.getClient = exports.addfacture = exports.getAllfactures = exports.getFactureByClient = void 0;
const user_model_1 = require("../models/user.model");
const facture_model_1 = require("../models/facture.model");
const champFacture_model_1 = require("../models/champFacture.model");
const getFactureByClient = async (req, res) => {
    const cl = await user_model_1.User.findOne({ email: req.params.email });
    if (cl) {
        try {
            const factures = await facture_model_1.Facture.find({ client: cl });
            return res.send(factures);
        }
        catch (err) {
            res.send('no factures for this client');
        }
    }
    else {
        res.send('no client with such email');
    }
};
exports.getFactureByClient = getFactureByClient;
const getAllfactures = async (req, res) => {
    try {
        const factures = await facture_model_1.Facture.find().sort('date').exec();
        return res.send(factures);
    }
    catch (err) {
        res.send('no factures yet');
    }
};
exports.getAllfactures = getAllfactures;
const addfacture = async (req, res) => {
    var _a;
    const cl = await user_model_1.User.findOne({ email: req.body.email });
    const factures = await facture_model_1.Facture.find().sort('date').exec();
    let exist = false;
    const d = new Date(req.body.date);
    if (cl) {
        factures.forEach(function (fact) {
            if (fact.total == req.body.total &&
                String(fact.date) == String(new Date(req.body.date)) &&
                String(fact.client) == String(cl._id) &&
                String(fact.echeance) == String(new Date(req.body.echeance))) {
                exist = true;
            }
        });
        const date = new Date(req.body.date);
        const total = Number(req.body.total);
        const client = cl;
        const echeance = new Date(req.body.echeance);
        const champFacture = [];
        if (!exist) {
            const facture = new facture_model_1.Facture({
                date: date,
                total: total,
                client: client,
                echeance: echeance,
                champFacture: champFacture
            });
            facture.populate('client');
            try {
                const savedFacture = await facture.save();
                (_a = cl.factures) === null || _a === void 0 ? void 0 : _a.push(savedFacture);
                cl.save();
                res.send(savedFacture);
            }
            catch (err) {
                res.status(400).send('il y a une erreur');
            }
        }
        else {
            res.status(400).send('facture déjà existante');
        }
    }
    else {
        res.status(400).send('pas de client avec cette adresse email');
    }
};
exports.addfacture = addfacture;
const getClient = async (req, res) => {
    const foundFacture = await facture_model_1.Facture.find({ _id: req.params.id }).populate('client');
    res.json(foundFacture[0].client);
};
exports.getClient = getClient;
const updatefacture = async (req, res) => {
    var _a;
    const facture = await facture_model_1.Facture.findOne({ _id: req.params.id });
    if (facture) {
        const Client = await user_model_1.User.findOne({ _id: facture.client._id });
        facture_model_1.Facture.updateOne({ _id: facture._id }, {
            date: new Date(req.body.date),
            total: req.body.total,
            echeance: new Date(req.body.echeance),
        }, function (err, data) {
            if (err) {
                return res.status(400).send('erreur');
            }
            else {
                return res.status(200).send('facture updated successfully');
            }
        });
        try {
            await facture.save();
            if (Client === null || Client === void 0 ? void 0 : Client.factures) {
                const index = Client === null || Client === void 0 ? void 0 : Client.factures.indexOf(facture._id);
                if (index) {
                    if (!(Client === null || Client === void 0 ? void 0 : Client.factures[index])) {
                        await ((_a = Client === null || Client === void 0 ? void 0 : Client.factures) === null || _a === void 0 ? void 0 : _a.push(facture));
                        await (Client === null || Client === void 0 ? void 0 : Client.save());
                    }
                }
            }
        }
        catch (err) {
            res.status(400);
        }
    }
    else {
        return res.status(400).send('email introuvable');
    }
};
exports.updatefacture = updatefacture;
const deletefacture = async (req, res) => {
    var _a, _b;
    const facture = await facture_model_1.Facture.findOne({ _id: req.params.id });
    if (facture) {
        await facture_model_1.Facture.deleteOne({ _id: facture._id });
        if (facture.champFacture) {
            facture.champFacture.forEach(async (champ) => {
                await champFacture_model_1.Champ.deleteOne({ _id: champ });
            });
        }
        const user = await user_model_1.User.findOne({ _id: facture.client._id });
        const ind = (_a = user === null || user === void 0 ? void 0 : user.factures) === null || _a === void 0 ? void 0 : _a.indexOf(facture._id);
        if (ind) {
            (_b = user === null || user === void 0 ? void 0 : user.factures) === null || _b === void 0 ? void 0 : _b.splice(ind, 1);
            user === null || user === void 0 ? void 0 : user.save();
        }
        return res.status(200).send('facture deleted');
    }
    else {
        return res.status(404).send('no facture with id: ' + req.params.id);
    }
};
exports.deletefacture = deletefacture;
//# sourceMappingURL=data:application/json;base64,
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.deleteUser = exports.updateUser = exports.addUser = exports.getAllFactures = exports.getUserByEmail = exports.getAllUsers = void 0;
const user_model_1 = require("../models/user.model");
const facture_model_1 = require("../models/facture.model");
const getAllUsers = async (req, res) => {
    const user = await user_model_1.User.find().sort('date').exec();
    return res.send(user);
};
exports.getAllUsers = getAllUsers;
const getUserByEmail = async (req, res) => {
    const user = await user_model_1.User.findOne({ email: req.params.email });
    if (user) {
        return res.status(200).send(user);
    }
    else {
        return res.status(400).send('no user with email:' + req.params.email);
    }
};
exports.getUserByEmail = getUserByEmail;
const getAllFactures = async (req, res) => {
    const foundUser = await user_model_1.User.find({ _id: req.params._id }).populate('factures').exec();
    res.json(foundUser[0].factures);
};
exports.getAllFactures = getAllFactures;
const addUser = async (req, res) => {
    const currentUser = await user_model_1.User.findOne({ email: req.body.email });
    if (currentUser)
        return res.status(400).send('Email already exists');
    const user = new user_model_1.User(req.body);
    if (user.role == "employe" || user.role == "client") {
        try {
            const savedUser = await user.save();
            res.send(savedUser);
        }
        catch (err) {
            res.status(400);
        }
    }
};
exports.addUser = addUser;
const updateUser = async (req, res) => {
    const user = await user_model_1.User.findOne({ email: req.params.email });
    if (user) {
        if (user.role == "employe" || user.role == "client") {
            user_model_1.User.updateOne({ _id: user._id }, { nom: req.body.nom, prenom: req.body.prenom, password: req.body.password }, function (err, data) {
                if (err) {
                    return res.status(400).send('erreur');
                }
                else {
                    return res.status(200).send('user updated successfully');
                }
            });
            try {
                await user.save();
            }
            catch (err) {
                res.status(400);
            }
        }
    }
    else {
        return res.status(400).send('email introuvable');
    }
};
exports.updateUser = updateUser;
const deleteUser = async (req, res) => {
    const user = await user_model_1.User.findOne({ email: req.params.email });
    if (user) {
        if (user.role == "employe" || user.role == "client") {
            await user_model_1.User.deleteOne({ email: user.email });
            if (user.factures) {
                user.factures.forEach(async (facture) => {
                    await facture_model_1.Facture.deleteOne({ _id: facture });
                });
            }
            return res.status(200).send('user deleted');
        }
    }
    else {
        return res.status(404).send('no user with email: ' + req.params.email);
    }
};
exports.deleteUser = deleteUser;
//# sourceMappingURL=data:application/json;base64,
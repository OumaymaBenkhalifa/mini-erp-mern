"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.deleteChampTN = exports.updateChampTN = exports.getFicheTN = exports.addChampTN = exports.getAllChampsTN = exports.deleteChampFR = exports.updateChampFR = exports.getFicheFR = exports.addChampFR = exports.getAllChampsFR = void 0;
const champFicheFR_model_1 = require("../models/champFicheFR.model");
const champFicheTN_model_1 = require("../models/champFicheTN.model");
const fichePaix_model_1 = require("../models/fichePaix.model");
const fichePaix_model_2 = require("../models/fichePaix.model");
const getAllChampsFR = async (req, res) => {
    try {
        const champ = await champFicheFR_model_1.ChampFicheFR.find();
        return res.send(champ);
    }
    catch (err) {
        res.send('pas de champs');
    }
};
exports.getAllChampsFR = getAllChampsFR;
const addChampFR = async (req, res) => {
    var _a;
    const fiche = await fichePaix_model_1.FicheFR.findOne({ _id: req.params.id });
    const { libelle, baseSalariale, taux, basePatronale, tauxPatronal } = req.body;
    if (fiche) {
        const salariale = (baseSalariale * taux) / 100;
        const patronal = (basePatronale * tauxPatronal) / 100;
        const champ = new champFicheFR_model_1.ChampFicheFR({
            libelle: libelle,
            baseSalariale: baseSalariale,
            taux: taux,
            resultatSalarial: salariale,
            basePatronale: basePatronale,
            tauxPatronal: tauxPatronal,
            resultatPatronal: patronal,
            Fiche: fiche,
        });
        champ.populate('Fiche');
        try {
            const savedchamp = await champ.save();
            (_a = fiche === null || fiche === void 0 ? void 0 : fiche.ChampFiche) === null || _a === void 0 ? void 0 : _a.push(savedchamp);
            fiche.save();
            res.send(savedchamp);
        }
        catch (err) {
            res.status(400).send('il y a une erreur');
        }
    }
    else {
        res.status(400).send('pas de fiche avec cet id');
    }
};
exports.addChampFR = addChampFR;
const getFicheFR = async (req, res) => {
    const foundchamp = await champFicheFR_model_1.ChampFicheFR.find({ _id: req.params.id }).populate('Fiche');
    res.json(foundchamp[0].Fiche);
};
exports.getFicheFR = getFicheFR;
const updateChampFR = async (req, res) => {
    const champ = await champFicheFR_model_1.ChampFicheFR.findOne({ _id: req.params.id });
    const fiche = await fichePaix_model_1.FicheFR.findOne({ _id: champ === null || champ === void 0 ? void 0 : champ.Fiche });
    const { libelle, baseSalariale, taux, basePatronale, tauxPatronal } = req.body;
    if (champ) {
        const salariale = (baseSalariale * taux) / 100;
        const patronal = (basePatronale * tauxPatronal) / 100;
        champFicheFR_model_1.ChampFicheFR.updateOne({ _id: champ._id }, {
            libelle: libelle,
            baseSalariale: baseSalariale,
            taux: taux,
            resultatSalarial: salariale,
            basePatronale: basePatronale,
            tauxPatronal: tauxPatronal,
            resultatPatronal: patronal,
        }, function (err, data) {
            if (err) {
                return res.status(400).send('erreur');
            }
            else {
                return res.status(200).send('champ updated successfully');
            }
        });
        try {
            await champ.save();
        }
        catch (err) {
            res.status(400);
        }
    }
    else {
        return res.status(400).send('champ introuvable');
    }
};
exports.updateChampFR = updateChampFR;
const deleteChampFR = async (req, res) => {
    var _a, _b;
    const champ = await champFicheFR_model_1.ChampFicheFR.findOne({ _id: req.params.id });
    if (champ) {
        await champFicheFR_model_1.ChampFicheFR.deleteOne({ _id: champ._id });
        const fiche = await fichePaix_model_1.FicheFR.findOne({ _id: champ.Fiche });
        const ind = (_a = fiche === null || fiche === void 0 ? void 0 : fiche.ChampFiche) === null || _a === void 0 ? void 0 : _a.indexOf(champ);
        if (ind)
            (_b = fiche === null || fiche === void 0 ? void 0 : fiche.ChampFiche) === null || _b === void 0 ? void 0 : _b.splice(ind, 1);
        fiche === null || fiche === void 0 ? void 0 : fiche.save();
        return res.status(200).send('champ deleted');
    }
    else {
        return res.status(404).send('no champ with id: ' + req.params.id);
    }
};
exports.deleteChampFR = deleteChampFR;
const getAllChampsTN = async (req, res) => {
    try {
        const champ = await champFicheTN_model_1.ChampFicheTN.find();
        return res.send(champ);
    }
    catch (err) {
        res.send('pas de champs');
    }
};
exports.getAllChampsTN = getAllChampsTN;
const addChampTN = async (req, res) => {
    var _a;
    const fiche = await fichePaix_model_2.FicheTN.findOne({ _id: req.params.id });
    const { libelle, nombre, gains, retenues } = req.body;
    if (fiche) {
        const champ = new champFicheTN_model_1.ChampFicheTN({
            libelle: libelle,
            nombre: nombre,
            gains: gains,
            retenues: retenues,
            Fiche: fiche,
        });
        champ.populate('Fiche');
        try {
            const savedchamp = await champ.save();
            (_a = fiche === null || fiche === void 0 ? void 0 : fiche.ChampFiche) === null || _a === void 0 ? void 0 : _a.push(savedchamp);
            fiche.save();
            res.send(savedchamp);
        }
        catch (err) {
            res.status(400).send('il y a une erreur');
        }
    }
    else {
        res.status(400).send('pas de fiche avec cet id');
    }
};
exports.addChampTN = addChampTN;
const getFicheTN = async (req, res) => {
    const foundchamp = await champFicheTN_model_1.ChampFicheTN.find({ _id: req.params.id }).populate('Fiche');
    res.json(foundchamp[0].Fiche);
};
exports.getFicheTN = getFicheTN;
const updateChampTN = async (req, res) => {
    const champ = await champFicheTN_model_1.ChampFicheTN.findOne({ _id: req.params.id });
    const fiche = await fichePaix_model_2.FicheTN.findOne({ _id: champ === null || champ === void 0 ? void 0 : champ.Fiche });
    const { libelle, nombre, gains, retenues } = req.body;
    if (champ) {
        champFicheTN_model_1.ChampFicheTN.updateOne({ _id: champ._id }, {
            libelle: libelle,
            nombre: nombre,
            gains: gains,
            retenues: retenues,
        }, function (err, data) {
            if (err) {
                return res.status(400).send('erreur');
            }
            else {
                return res.status(200).send('champ updated successfully');
            }
        });
        try {
            await champ.save();
        }
        catch (err) {
            res.status(400);
        }
    }
    else {
        return res.status(400).send('champ introuvable');
    }
};
exports.updateChampTN = updateChampTN;
const deleteChampTN = async (req, res) => {
    var _a, _b;
    const champ = await champFicheTN_model_1.ChampFicheTN.findOne({ _id: req.params.id });
    if (champ) {
        await champFicheTN_model_1.ChampFicheTN.deleteOne({ _id: champ._id });
        const fiche = await fichePaix_model_2.FicheTN.findOne({ _id: champ.Fiche });
        const ind = (_a = fiche === null || fiche === void 0 ? void 0 : fiche.ChampFiche) === null || _a === void 0 ? void 0 : _a.indexOf(champ);
        if (ind)
            (_b = fiche === null || fiche === void 0 ? void 0 : fiche.ChampFiche) === null || _b === void 0 ? void 0 : _b.splice(ind, 1);
        fiche === null || fiche === void 0 ? void 0 : fiche.save();
        return res.status(200).send('champ deleted');
    }
    else {
        return res.status(404).send('no champ with id: ' + req.params.id);
    }
};
exports.deleteChampTN = deleteChampTN;
//# sourceMappingURL=data:application/json;base64,
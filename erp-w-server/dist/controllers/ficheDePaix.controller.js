"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.deleteficheTN = exports.updateFicheTN = exports.addFicheTN = exports.getFicheTNByEmployee = exports.getAllfichesTN = exports.deleteficheFR = exports.updateFicheFR = exports.addFicheFR = exports.getFicheFRByEmployee = exports.getAllfichesFR = void 0;
const user_model_1 = require("../models/user.model");
const fichePaix_model_1 = require("../models/fichePaix.model");
const fichePaix_model_2 = require("../models/fichePaix.model");
const champFacture_model_1 = require("../models/champFacture.model");
const getAllfichesFR = async (req, res) => {
    try {
        const fiches = await fichePaix_model_1.FicheFR.find().sort('dateDebut').exec();
        return res.send(fiches);
    }
    catch (err) {
        res.send('no fiches yet');
    }
};
exports.getAllfichesFR = getAllfichesFR;
const getFicheFRByEmployee = async (req, res) => {
    const employee = await user_model_1.User.findOne({ email: req.params.email });
    if (employee) {
        try {
            const fiches = await fichePaix_model_1.FicheFR.find({ beneficiaire: employee }).sort('dateDebut').exec();
            return res.send(fiches);
        }
        catch (err) {
            res.send('no fiches yet');
        }
    }
    else {
        res.send('no employee with such email');
    }
};
exports.getFicheFRByEmployee = getFicheFRByEmployee;
const addFicheFR = async (req, res) => {
    var _a;
    const beneficiaire = await user_model_1.User.findOne({ email: req.body.email });
    const fiches = await fichePaix_model_1.FicheFR.find();
    let exist = false;
    const { dateDebut, dateFin, postOccupe, matricule, numSecuriteSocial, netPaye, email } = req.body;
    if (beneficiaire) {
        fiches.forEach(function (fiche) {
            if (String(fiche.dateDebut) == String(new Date(dateDebut)) &&
                String(fiche.dateFin) == String(new Date(dateFin)) &&
                String(fiche.beneficiaire) == String(beneficiaire._id)) {
                exist = true;
            }
        });
        if (!exist) {
            const ficheFr = new fichePaix_model_1.FicheFR({
                dateDebut: new Date(dateDebut),
                dateFin: new Date(dateFin),
                postOccupe: postOccupe,
                matricule: matricule,
                numSecuriteSocial: numSecuriteSocial,
                netPaye: netPaye,
                beneficiaire: beneficiaire,
            });
            ficheFr.populate('beneficiaire');
            try {
                const savedFicheFr = await ficheFr.save();
                (_a = beneficiaire.ficheDePaixFR) === null || _a === void 0 ? void 0 : _a.push(savedFicheFr);
                beneficiaire.save();
                res.send(savedFicheFr);
            }
            catch (err) {
                res.status(400).send('il y a une erreur');
            }
        }
        else {
            res.status(400).send('fiche déjà existante');
        }
    }
    else {
        res.status(400).send('pas d employe avec cette adresse email');
    }
};
exports.addFicheFR = addFicheFR;
const updateFicheFR = async (req, res) => {
    var _a;
    const fiche = await fichePaix_model_1.FicheFR.findOne({ _id: req.params.id });
    const { dateDebut, dateFin, postOccupe, matricule, numSecuriteSocial, netPaye } = req.body;
    if (fiche) {
        const beneficiaire = await user_model_1.User.findOne({ _id: fiche.beneficiaire._id });
        fichePaix_model_1.FicheFR.updateOne({ _id: fiche._id }, {
            dateDebut: new Date(dateDebut),
            dateFin: new Date(dateFin),
            postOccupe: postOccupe,
            matricule: matricule,
            numSecuriteSocial: numSecuriteSocial,
            netPaye: netPaye,
        }, function (err, data) {
            if (err) {
                return res.status(400).send('erreur');
            }
            else {
                return res.status(200).send('fiche updated successfully');
            }
        });
        try {
            await fiche.save();
            if (beneficiaire === null || beneficiaire === void 0 ? void 0 : beneficiaire.ficheDePaixFR) {
                const index = beneficiaire === null || beneficiaire === void 0 ? void 0 : beneficiaire.ficheDePaixFR.indexOf(fiche);
                if (index) {
                    if (!(beneficiaire === null || beneficiaire === void 0 ? void 0 : beneficiaire.ficheDePaixFR[index])) {
                        await ((_a = beneficiaire === null || beneficiaire === void 0 ? void 0 : beneficiaire.ficheDePaixFR) === null || _a === void 0 ? void 0 : _a.push(fiche));
                        await (beneficiaire === null || beneficiaire === void 0 ? void 0 : beneficiaire.save());
                    }
                }
            }
        }
        catch (err) {
            res.status(400);
        }
    }
    else {
        return res.status(400).send('email introuvable');
    }
};
exports.updateFicheFR = updateFicheFR;
const deleteficheFR = async (req, res) => {
    var _a, _b;
    const fiche = await fichePaix_model_1.FicheFR.findOne({ _id: req.params.id });
    if (fiche) {
        await fichePaix_model_1.FicheFR.deleteOne({ _id: fiche._id });
        if (fiche.ChampFiche) {
            fiche.ChampFiche.forEach(async (champ) => {
                await champFacture_model_1.Champ.deleteOne({ _id: champ });
            });
        }
        const user = await user_model_1.User.findOne({ _id: fiche.beneficiaire._id });
        const id = fiche._id;
        const ind = (_a = user === null || user === void 0 ? void 0 : user.ficheDePaixFR) === null || _a === void 0 ? void 0 : _a.indexOf(fiche);
        if (ind) {
            (_b = user === null || user === void 0 ? void 0 : user.ficheDePaixFR) === null || _b === void 0 ? void 0 : _b.splice(ind, 1);
            user === null || user === void 0 ? void 0 : user.save();
        }
        return res.status(200).send('fiche deleted');
    }
    else {
        return res.status(404).send('no fiche with id: ' + req.params.id);
    }
};
exports.deleteficheFR = deleteficheFR;
const getAllfichesTN = async (req, res) => {
    try {
        const fiches = await fichePaix_model_2.FicheTN.find().sort('dateDebut').exec();
        return res.send(fiches);
    }
    catch (err) {
        res.send('no fiches yet');
    }
};
exports.getAllfichesTN = getAllfichesTN;
const getFicheTNByEmployee = async (req, res) => {
    const employee = await user_model_1.User.findOne({ email: req.params.email });
    if (employee) {
        try {
            const fiches = await fichePaix_model_2.FicheTN.find({ beneficiaire: employee }).sort('dateDebut').exec();
            return res.send(fiches);
        }
        catch (err) {
            res.send('no fiches yet');
        }
    }
    else {
        res.send('no employee with such email');
    }
};
exports.getFicheTNByEmployee = getFicheTNByEmployee;
const addFicheTN = async (req, res) => {
    var _a;
    const beneficiaire = await user_model_1.User.findOne({ email: req.body.email });
    const fiches = await fichePaix_model_2.FicheTN.find();
    let exist = false;
    const { dateDebut, dateFin, postOccupe, matricule, numSecuriteSocial, netPaye, email } = req.body;
    if (beneficiaire) {
        fiches.forEach(function (fiche) {
            if (String(fiche.dateDebut) == String(new Date(dateDebut)) &&
                String(fiche.dateFin) == String(new Date(dateFin)) &&
                String(fiche.beneficiaire) == String(beneficiaire._id)) {
                exist = true;
            }
        });
        if (!exist) {
            const ficheTn = new fichePaix_model_2.FicheTN({
                dateDebut: new Date(dateDebut),
                dateFin: new Date(dateFin),
                postOccupe: postOccupe,
                matricule: matricule,
                numSecuriteSocial: numSecuriteSocial,
                netPaye: netPaye,
                beneficiaire: beneficiaire,
            });
            ficheTn.populate('beneficiaire');
            try {
                const savedFicheTn = await ficheTn.save();
                (_a = beneficiaire.ficheDePaixTN) === null || _a === void 0 ? void 0 : _a.push(savedFicheTn);
                beneficiaire.save();
                res.send(savedFicheTn);
            }
            catch (err) {
                res.status(400).send('il y a une erreur');
            }
        }
        else {
            res.status(400).send('fiche déjà existante');
        }
    }
    else {
        res.status(400).send('pas d employe avec cette adresse email');
    }
};
exports.addFicheTN = addFicheTN;
const updateFicheTN = async (req, res) => {
    var _a;
    const fiche = await fichePaix_model_2.FicheTN.findOne({ _id: req.params.id });
    const { dateDebut, dateFin, postOccupe, matricule, numSecuriteSocial, netPaye } = req.body;
    if (fiche) {
        const beneficiaire = await user_model_1.User.findOne({ _id: fiche.beneficiaire._id });
        console.log(fiche);
        fichePaix_model_2.FicheTN.updateOne({ _id: fiche._id }, {
            dateDebut: new Date(dateDebut),
            dateFin: new Date(dateFin),
            postOccupe: postOccupe,
            matricule: matricule,
            numSecuriteSocial: numSecuriteSocial,
            netPaye: netPaye,
        }, function (err, data) {
            if (err) {
                return res.status(400).send('erreur');
            }
            else {
                return res.status(200).send('fiche updated successfully');
            }
        });
        try {
            await fiche.save();
            if (beneficiaire === null || beneficiaire === void 0 ? void 0 : beneficiaire.ficheDePaixTN) {
                const index = beneficiaire === null || beneficiaire === void 0 ? void 0 : beneficiaire.ficheDePaixTN.indexOf(fiche);
                if (index) {
                    if (!(beneficiaire === null || beneficiaire === void 0 ? void 0 : beneficiaire.ficheDePaixTN[index])) {
                        await ((_a = beneficiaire === null || beneficiaire === void 0 ? void 0 : beneficiaire.ficheDePaixTN) === null || _a === void 0 ? void 0 : _a.push(fiche));
                        await (beneficiaire === null || beneficiaire === void 0 ? void 0 : beneficiaire.save());
                    }
                }
            }
        }
        catch (err) {
            res.status(400);
        }
    }
    else {
        return res.status(400).send('email introuvable');
    }
};
exports.updateFicheTN = updateFicheTN;
const deleteficheTN = async (req, res) => {
    var _a, _b;
    const fiche = await fichePaix_model_2.FicheTN.findOne({ _id: req.params.id });
    if (fiche) {
        await fichePaix_model_2.FicheTN.deleteOne({ _id: fiche._id });
        if (fiche.ChampFiche) {
            fiche.ChampFiche.forEach(async (champ) => {
                await champFacture_model_1.Champ.deleteOne({ _id: champ });
            });
        }
        const user = await user_model_1.User.findOne({ _id: fiche.beneficiaire._id });
        const id = fiche._id;
        const ind = (_a = user === null || user === void 0 ? void 0 : user.ficheDePaixTN) === null || _a === void 0 ? void 0 : _a.indexOf(fiche);
        if (ind) {
            (_b = user === null || user === void 0 ? void 0 : user.ficheDePaixTN) === null || _b === void 0 ? void 0 : _b.splice(ind, 1);
            user === null || user === void 0 ? void 0 : user.save();
        }
        return res.status(200).send('fiche deleted');
    }
    else {
        return res.status(404).send('no fiche with id: ' + req.params.id);
    }
};
exports.deleteficheTN = deleteficheTN;
//# sourceMappingURL=data:application/json;base64,
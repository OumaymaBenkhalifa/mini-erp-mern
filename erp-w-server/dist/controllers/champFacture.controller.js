"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.deleteChamp = exports.updateChamp = exports.getFacture = exports.addChamp = exports.getAllChamps = void 0;
const facture_model_1 = require("../models/facture.model");
const champFacture_model_1 = require("../models/champFacture.model");
const getAllChamps = async (req, res) => {
    try {
        const champ = await champFacture_model_1.Champ.find();
        return res.send(champ);
    }
    catch (err) {
        res.send('pas de champs');
    }
};
exports.getAllChamps = getAllChamps;
const addChamp = async (req, res) => {
    const fact = await facture_model_1.Facture.findOne({ _id: req.params.id });
    if (fact) {
        const total = req.body.coutUnitaire * req.body.quantite;
        const champ = new champFacture_model_1.Champ({
            description: req.body.description,
            coutUnitaire: req.body.coutUnitaire,
            facture: fact,
            quantite: req.body.quantite,
            montant: total,
        });
        champ.populate('facture');
        try {
            const savedchamp = await champ.save();
            fact.champFacture.push(savedchamp);
            fact.save();
            res.send(savedchamp);
        }
        catch (err) {
            res.status(400).send('il y a une erreur');
        }
    }
    else {
        res.status(400).send('pas de facture avec cet id');
    }
};
exports.addChamp = addChamp;
const getFacture = async (req, res) => {
    const foundchamp = await champFacture_model_1.Champ.find({ _id: req.params.id }).populate('facture');
    res.json(foundchamp[0].facture);
};
exports.getFacture = getFacture;
const updateChamp = async (req, res) => {
    const champ = await champFacture_model_1.Champ.findOne({ _id: req.params.id });
    const facture = await facture_model_1.Facture.findOne({ _id: champ === null || champ === void 0 ? void 0 : champ.facture._id });
    if (champ) {
        champFacture_model_1.Champ.updateOne({ _id: champ._id }, {
            description: req.body.description,
            coutUnitaire: req.body.coutUnitaire,
            quantite: req.body.quantite,
        }, function (err, data) {
            if (err) {
                return res.status(400).send('erreur');
            }
            else {
                return res.status(200).send('champ updated successfully');
            }
        });
        try {
            await champ.save();
        }
        catch (err) {
            res.status(400);
        }
    }
    else {
        return res.status(400).send('champ introuvable');
    }
};
exports.updateChamp = updateChamp;
const deleteChamp = async (req, res) => {
    const champ = await champFacture_model_1.Champ.findOne({ _id: req.params.id });
    if (champ) {
        await champFacture_model_1.Champ.deleteOne({ _id: champ._id });
        const facture = await facture_model_1.Facture.findOne({ _id: champ.facture._id });
        const ind = facture === null || facture === void 0 ? void 0 : facture.champFacture.indexOf(champ);
        if (ind)
            facture === null || facture === void 0 ? void 0 : facture.champFacture.splice(ind, 1);
        facture === null || facture === void 0 ? void 0 : facture.save();
        return res.status(200).send('champ deleted');
    }
    else {
        return res.status(404).send('no champ with id: ' + req.params.id);
    }
};
exports.deleteChamp = deleteChamp;
//# sourceMappingURL=data:application/json;base64,
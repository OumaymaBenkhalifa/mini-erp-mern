"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.errorHandler = void 0;
const app_logger_1 = __importDefault(require("@logger/app.logger"));
const custom_error_1 = require("../errors/custom-error");
function isErrorObject(obj) {
    return 'error' in obj || 'message' in obj;
}
const errorHandler = (err, _req, res, _next) => {
    if (err instanceof custom_error_1.CustomError) {
        const baseError = { status: err.statusCode };
        const serializedErrors = err.serializeErrors();
        if (isErrorObject(serializedErrors))
            return res.status(err.statusCode).send(Object.assign(baseError, serializedErrors));
        if (Array.isArray(serializedErrors) && serializedErrors.length == 1)
            return res
                .status(err.statusCode)
                .send(Object.assign(baseError, { error: serializedErrors[0].error, message: serializedErrors[0].message }));
        return res.status(err.statusCode).send(Object.assign(baseError, { errors: serializedErrors }));
    }
    app_logger_1.default.logger.error(err.stack);
    return res.status(500).send({ status: 500, message: 'Internal server error' });
};
exports.errorHandler = errorHandler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXJyb3ItaGFuZGxlci5qcyIsInNvdXJjZVJvb3QiOiIuL3NyYy8iLCJzb3VyY2VzIjpbIm1pZGRsZXdhcmVzL2Vycm9yLWhhbmRsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBR0Esb0VBQTJDO0FBRTNDLHlEQUFxRDtBQWNyRCxTQUFTLGFBQWEsQ0FBQyxHQUFXO0lBSWhDLE9BQU8sT0FBTyxJQUFJLEdBQUcsSUFBSSxTQUFTLElBQUksR0FBRyxDQUFDO0FBQzVDLENBQUM7QUF3Qk0sTUFBTSxZQUFZLEdBQUcsQ0FBQyxHQUFVLEVBQUUsSUFBYSxFQUFFLEdBQWEsRUFBRSxLQUFtQixFQUFFLEVBQUU7SUFLNUYsSUFBSSxHQUFHLFlBQVksMEJBQVcsRUFBRTtRQUU5QixNQUFNLFNBQVMsR0FBRyxFQUFFLE1BQU0sRUFBRSxHQUFHLENBQUMsVUFBVSxFQUFFLENBQUM7UUFFN0MsTUFBTSxnQkFBZ0IsR0FBRyxHQUFHLENBQUMsZUFBZSxFQUFFLENBQUM7UUFHL0MsSUFBSSxhQUFhLENBQUMsZ0JBQWdCLENBQUM7WUFFakMsT0FBTyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDO1FBR3JGLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLGdCQUFnQixDQUFDLE1BQU0sSUFBSSxDQUFDO1lBRWpFLE9BQU8sR0FBRztpQkFDUCxNQUFNLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQztpQkFDdEIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsU0FBUyxFQUFFLEVBQUUsS0FBSyxFQUFFLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBRSxPQUFPLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBR2hILE9BQU8sR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsU0FBUyxFQUFFLEVBQUUsTUFBTSxFQUFFLGdCQUFnQixFQUFFLENBQUMsQ0FBQyxDQUFDO0tBQ2hHO0lBSUQsb0JBQVMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUdsQyxPQUFPLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsQ0FBQyxDQUFDO0FBQ2pGLENBQUMsQ0FBQztBQWpDVyxRQUFBLFlBQVksZ0JBaUN2QiIsInNvdXJjZXNDb250ZW50IjpbIi8vIEV4dGVybmFsc1xuaW1wb3J0IHsgTmV4dEZ1bmN0aW9uLCBSZXF1ZXN0LCBSZXNwb25zZSB9IGZyb20gJ2V4cHJlc3MnO1xuLy8gTW9kdWxlc1xuaW1wb3J0IEFwcExvZ2dlciBmcm9tICdAbG9nZ2VyL2FwcC5sb2dnZXInO1xuLy8gRXJyb3JzXG5pbXBvcnQgeyBDdXN0b21FcnJvciB9IGZyb20gJy4uL2Vycm9ycy9jdXN0b20tZXJyb3InO1xuXG4vKipcbiAqIGBpc0Vycm9yT2JqZWN0YC5cbiAqXG4gKiBUeXBlIGd1YXJkIHRvIGNoZWNrIGlmIGFuIG9iamVjdCBpbXBsZW1lbnRzIGFuIGVycm9yIG9iamVjdCBpbnRlcmZhY2UuXG4gKiBDaGVja3MgaWYgdGhlIHBhc3NlZCBpbiBvYmplY3QgY29udGFpbnMgc3BlY2lmaWMgcHJvcGVydGllcyBhbmQgcmV0dXJuc1xuICogYSB0eXBlIHByZWRpY2F0ZS5cbiAqIFxuICogQHBhcmFtIHtvYmplY3R9IG9ialxuICogQHJldHVybiB7Ym9vbGVhbn0gb2JqIGlzXG5cbiAqL1xuXG5mdW5jdGlvbiBpc0Vycm9yT2JqZWN0KG9iajogb2JqZWN0KTogb2JqIGlzIHtcbiAgZXJyb3I/OiBzdHJpbmc7XG4gIG1lc3NhZ2U/OiBzdHJpbmc7XG59IHtcbiAgcmV0dXJuICdlcnJvcicgaW4gb2JqIHx8ICdtZXNzYWdlJyBpbiBvYmo7XG59XG5cbi8qKlxuICogYEVycm9ySGFuZGxlcmAuXG4gKlxuICogTWlkZGxld2FyZSBmb3IgcHJvY2Vzc2luZyBhbmQgaGFuZGxpbmcgdGhyb3duIGV4Y2VwdGlvbnMuXG4gKiBGb3JtYXRzIGFuIGVycm9yIG9iamVjdCBkZXBlbmRpbmcgb24gdGhlIHR5cGUgYW5kIGNvbnRlbnQgb2YgYVxuICogY2F1Z2h0IGV4Y2VwdGlvbiB0byBub3JtYWxpemVzIHRoZSBzdHJ1Y3R1cmUgb2YgZXJyb3IgcmVzcG9uc2VzLlxuICogXG4gKiAtIEluamVjdHMgcmVzcG9uc2Ugc3RhdHVzIGNvZGUgaW50byB0aGUgcmVzcG9uc2UgYm9keS5cbiAqIC0gQXBwZW5kcyBzZXJpYWxpemVkIGVycm9yJ3MgZmlyc3QgZW50cnkgdG8gdGhlIHJlc3BvbnNlIGJvZHkgaWZcbiAqIGl0IGNvbnRhaW5zIGEgc2luZ2xlIGVudHJ5LlxuICogLSBBcHBlbmRzIHNlcmlhbGl6ZWQgZXJyb3JzIHRvIHRoZSByZXNwb25zZSBib2R5IGlmIGl0J3MgYW4gYXJyYXlcbiAqIHdpdGggbXVsdGlwbGUgZW50cmllcy5cblxuICpcbiAqIEBwYXJhbSB7RXJyb3J9IGVyclxuICogQHBhcmFtIHtSZXF1ZXN0fSBfcmVxXG4gKiBAcGFyYW0ge1Jlc3BvbnNlfSByZXNcbiAqIEBwYXJhbSB7TmV4dEZ1bmN0aW9ufSBfbmV4dFxuXG4gKi9cblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFyc1xuZXhwb3J0IGNvbnN0IGVycm9ySGFuZGxlciA9IChlcnI6IEVycm9yLCBfcmVxOiBSZXF1ZXN0LCByZXM6IFJlc3BvbnNlLCBfbmV4dDogTmV4dEZ1bmN0aW9uKSA9PiB7XG4gIC8vIF9uZXh0IGZ1bmN0aW9uIGlzIHJlcXVpcmVkIGV2ZW4gdGhvdWdoIGl0IGlzIG5vdCBleHBsaWNpdGx5IGNhbGxlZC4gRm9yIHRoZSBtaWRkbGV3YXJlIHRvXG4gIC8vIHRha2UgZWZmZWN0IHdlIHN0aWxsIG5lZWQgaXQgYXMgYSBwYXJhbWV0ZXIsIGhlbmNlIHRoZSBlc2xpbnQtZGlzYWJsZSBsaW5lLlxuXG4gIC8vIFdoZW4gYW4gaW5zdGFuY2Ugb2YgQ3VzdG9tRXJyb3IgaXMgY2F1Z2h0LCByZXNwb25kIGFjY29yZGluZyB0byBlcnJvciBjb250ZXh0LlxuICBpZiAoZXJyIGluc3RhbmNlb2YgQ3VzdG9tRXJyb3IpIHtcbiAgICAvLyBDcmVhdGUgYW4gaW1tdXRhYmxlIGJhc2VFcnJvciBvYmplY3QgY29udGFpbmluZyByZXNwb25zZSBzdGF0dXMgY29kZS5cbiAgICBjb25zdCBiYXNlRXJyb3IgPSB7IHN0YXR1czogZXJyLnN0YXR1c0NvZGUgfTtcbiAgICAvLyBHZXQgc2VyaWFsaXplZCBlcnJvcnMgZnJvbSBlcnJvclxuICAgIGNvbnN0IHNlcmlhbGl6ZWRFcnJvcnMgPSBlcnIuc2VyaWFsaXplRXJyb3JzKCk7XG5cbiAgICAvLyBJZiBzZXJpYWxpemVkIGVycm9ycyBpcyBhbiBvYmplY3RcbiAgICBpZiAoaXNFcnJvck9iamVjdChzZXJpYWxpemVkRXJyb3JzKSlcbiAgICAgIC8vIEFwcGVuZCBlcnJvciBhbmQgbWVzc2FnZSB0byBiYXNlIGVycm9yIGFuZCBzZW5kIGVycm9yIHJlc3BvbnNlLlxuICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoZXJyLnN0YXR1c0NvZGUpLnNlbmQoT2JqZWN0LmFzc2lnbihiYXNlRXJyb3IsIHNlcmlhbGl6ZWRFcnJvcnMpKTtcblxuICAgIC8vIElmIHNlcmlhbGl6ZWQgZXJyb3JzIGlzIGFuIHJyYXkgY29udGFpbmcgYSBzaW5nbGUgZW50cnkuXG4gICAgaWYgKEFycmF5LmlzQXJyYXkoc2VyaWFsaXplZEVycm9ycykgJiYgc2VyaWFsaXplZEVycm9ycy5sZW5ndGggPT0gMSlcbiAgICAgIC8vIEFwcGVuZCBlbnRyeSBlcnJvciBhbmQgbWVzc2FnZSB0byB0aGUgYmFzZSBlcnJvciBhbmQgc2VuZCBlcnJvciByZXNwb25zZS5cbiAgICAgIHJldHVybiByZXNcbiAgICAgICAgLnN0YXR1cyhlcnIuc3RhdHVzQ29kZSlcbiAgICAgICAgLnNlbmQoT2JqZWN0LmFzc2lnbihiYXNlRXJyb3IsIHsgZXJyb3I6IHNlcmlhbGl6ZWRFcnJvcnNbMF0uZXJyb3IsIG1lc3NhZ2U6IHNlcmlhbGl6ZWRFcnJvcnNbMF0ubWVzc2FnZSB9KSk7XG5cbiAgICAvLyBPdGhlcndpc2UsIGFwcGVuZCBzZXJpYWxpemVkIGVycm9ycyB0byB0aGUgYmFzZSBlcnJvciBhbmQgc2VuZCBlcnJvciByZXNwb25zZS5cbiAgICByZXR1cm4gcmVzLnN0YXR1cyhlcnIuc3RhdHVzQ29kZSkuc2VuZChPYmplY3QuYXNzaWduKGJhc2VFcnJvciwgeyBlcnJvcnM6IHNlcmlhbGl6ZWRFcnJvcnMgfSkpO1xuICB9XG5cbiAgLy8gSWYgZXhjZXB0aW9uIHdhcyBub3QgaGFuZGxlZC5cbiAgLy8gTG9nIGVycm9yIHN0YWNrICggZGV2ZWxvcG1lbmV0IGFuZCBwcm9kdWN0aW9uIGVudmlyb25tZW50cyApLlxuICBBcHBMb2dnZXIubG9nZ2VyLmVycm9yKGVyci5zdGFjayk7XG5cbiAgLy8gU2VuZCBiYWNrIGFuIEludGVybmFsIHNlcnZlciBlcnJvciByZXNwb25zZS5cbiAgcmV0dXJuIHJlcy5zdGF0dXMoNTAwKS5zZW5kKHsgc3RhdHVzOiA1MDAsIG1lc3NhZ2U6ICdJbnRlcm5hbCBzZXJ2ZXIgZXJyb3InIH0pO1xufTtcbiJdfQ==
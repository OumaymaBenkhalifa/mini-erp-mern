"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const passport_jwt_1 = require("passport-jwt");
const user_model_1 = require("../models/user.model");
module.exports = (passport) => {
    passport.serializeUser((user, done) => {
        done(null, user.id);
    });
    passport.deserializeUser(async (id, done) => {
        done(null, false);
    });
    passport.use(new passport_jwt_1.Strategy({
        secretOrKey: process.env.TOKEN_SECRET,
        jwtFromRequest: passport_jwt_1.ExtractJwt.fromHeader('access_token'),
        passReqToCallback: true,
    }, async (req, payload, done) => {
        const user = await user_model_1.User.findById(payload.id);
        if (user)
            return done(null, user);
        return done('requested user not found', false);
    }));
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFzc3BvcnQuY29uZmlnLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsibWlkZGxld2FyZXMvcGFzc3BvcnQuY29uZmlnLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0EsK0NBQXFGO0FBRXJGLHFEQUFtRDtBQUduRCxNQUFNLENBQUMsT0FBTyxHQUFHLENBQUMsUUFBd0IsRUFBRSxFQUFFO0lBQzVDLFFBQVEsQ0FBQyxhQUFhLENBQUMsQ0FBQyxJQUFXLEVBQUUsSUFBSSxFQUFFLEVBQUU7UUFDM0MsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDdEIsQ0FBQyxDQUFDLENBQUM7SUFFSCxRQUFRLENBQUMsZUFBZSxDQUFDLEtBQUssRUFBRSxFQUFFLEVBQUUsSUFBSSxFQUFFLEVBQUU7UUFDMUMsSUFBSSxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQztJQUNwQixDQUFDLENBQUMsQ0FBQztJQUVILFFBQVEsQ0FBQyxHQUFHLENBQ1YsSUFBSSx1QkFBVyxDQUNiO1FBQ0UsV0FBVyxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsWUFBWTtRQUNyQyxjQUFjLEVBQUUseUJBQVUsQ0FBQyxVQUFVLENBQUMsY0FBYyxDQUFDO1FBQ3JELGlCQUFpQixFQUFFLElBQUk7S0FDeEIsRUFDRCxLQUFLLEVBQUUsR0FBWSxFQUFFLE9BQVksRUFBRSxJQUFzQixFQUFFLEVBQUU7UUFDM0QsTUFBTSxJQUFJLEdBQUcsTUFBTSxpQkFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDN0MsSUFBSSxJQUFJO1lBQUUsT0FBTyxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ2xDLE9BQU8sSUFBSSxDQUFDLDBCQUEwQixFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ2pELENBQUMsQ0FDRixDQUNGLENBQUM7QUFDSixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQYXNzcG9ydFN0YXRpYyB9IGZyb20gJ3Bhc3Nwb3J0JztcbmltcG9ydCB7IFN0cmF0ZWd5IGFzIEp3dFN0cmF0ZWd5LCBFeHRyYWN0Snd0LCBWZXJpZmllZENhbGxiYWNrIH0gZnJvbSAncGFzc3BvcnQtand0JztcbmltcG9ydCB7IFJlcXVlc3QgfSBmcm9tICdleHByZXNzJztcbmltcG9ydCB7IFVzZXIsIElVc2VyIH0gZnJvbSAnLi4vbW9kZWxzL3VzZXIubW9kZWwnO1xuaW1wb3J0IHsgRW50aXR5Tm90Rm91bmRFcnJvciB9IGZyb20gJy4uL2Vycm9ycy9lbnRpdHktbm90LWZvdW5kLWVycm9yJztcblxubW9kdWxlLmV4cG9ydHMgPSAocGFzc3BvcnQ6IFBhc3Nwb3J0U3RhdGljKSA9PiB7XG4gIHBhc3Nwb3J0LnNlcmlhbGl6ZVVzZXIoKHVzZXI6IElVc2VyLCBkb25lKSA9PiB7XG4gICAgZG9uZShudWxsLCB1c2VyLmlkKTtcbiAgfSk7XG5cbiAgcGFzc3BvcnQuZGVzZXJpYWxpemVVc2VyKGFzeW5jIChpZCwgZG9uZSkgPT4ge1xuICAgIGRvbmUobnVsbCwgZmFsc2UpO1xuICB9KTtcblxuICBwYXNzcG9ydC51c2UoXG4gICAgbmV3IEp3dFN0cmF0ZWd5KFxuICAgICAge1xuICAgICAgICBzZWNyZXRPcktleTogcHJvY2Vzcy5lbnYuVE9LRU5fU0VDUkVULFxuICAgICAgICBqd3RGcm9tUmVxdWVzdDogRXh0cmFjdEp3dC5mcm9tSGVhZGVyKCdhY2Nlc3NfdG9rZW4nKSxcbiAgICAgICAgcGFzc1JlcVRvQ2FsbGJhY2s6IHRydWUsXG4gICAgICB9LFxuICAgICAgYXN5bmMgKHJlcTogUmVxdWVzdCwgcGF5bG9hZDogYW55LCBkb25lOiBWZXJpZmllZENhbGxiYWNrKSA9PiB7XG4gICAgICAgIGNvbnN0IHVzZXIgPSBhd2FpdCBVc2VyLmZpbmRCeUlkKHBheWxvYWQuaWQpO1xuICAgICAgICBpZiAodXNlcikgcmV0dXJuIGRvbmUobnVsbCwgdXNlcik7XG4gICAgICAgIHJldHVybiBkb25lKCdyZXF1ZXN0ZWQgdXNlciBub3QgZm91bmQnLCBmYWxzZSk7XG4gICAgICB9LFxuICAgICksXG4gICk7XG59O1xuIl19